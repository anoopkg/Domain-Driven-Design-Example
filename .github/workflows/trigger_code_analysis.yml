name: Repository Analysis Workflow
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # Allow manual trigger
  workflow_dispatch:

env:
  SERVICE_URL: https://jc-ws1.axiarete.com
  MAX_POLLING_ATTEMPTS: 30
  POLLING_INTERVAL: 5  # seconds (matching your UI's 5000ms interval)

jobs:
  analyze-repo:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get full history for commit info

      - name: Get commit info
        id: commit
        run: |
          echo "current_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "previous_sha=$(git rev-parse HEAD^)" >> $GITHUB_OUTPUT
          echo "branch=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_OUTPUT

      - name: Submit Analysis
        id: submit
        run: |
          response=$(curl -X POST "${{ env.SERVICE_URL }}/repo-analysis" \
            -H "Authorization: Bearer ${{ secrets.API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "repo_url": "${{ github.server_url }}/${{ github.repository }}.git",
              "branch": "${{ steps.commit.outputs.branch }}",
              "commit_id": "${{ steps.commit.outputs.current_sha }}",
              "previous_commit_id": "${{ steps.commit.outputs.previous_sha }}"
            }')
          echo "job_id=$(echo $response | jq -r .job_id)" >> $GITHUB_OUTPUT

      - name: Poll for completion
        run: |
          attempt=1
          while [ $attempt -le ${{ env.MAX_POLLING_ATTEMPTS }} ]; do
            response=$(curl -s "${{ env.SERVICE_URL }}/repo-analysis/status?job_id=${{ steps.submit.outputs.job_id }}" \
              -H "Authorization: Bearer ${{ secrets.API_TOKEN }}")
            status=$(echo $response | jq -r .status)
            
            if [ "$status" = "COMPLETED" ]; then
              echo "Analysis completed successfully"
              file_count=$(echo $response | jq -r .file_count)
              echo "Changed files: $file_count"
              exit 0
            elif [ "$status" = "FAILED" ]; then
              error=$(echo $response | jq -r .error)
              echo "Analysis failed: $error"
              exit 1
            fi
            
            echo "Attempt $attempt: Analysis status - $status, waiting..."
            sleep ${{ env.POLLING_INTERVAL }}
            attempt=$((attempt + 1))
          done
          
          echo "Maximum polling attempts reached"
          exit 1
